plugins {
    id 'groovy'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'org.springframework.cloud.contract' version '4.0.3'
    id 'maven-publish'
}

group = 'io.naraway'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/release" }
}

ext {
    set('springCloudVersion', "${BOM_VERSION}")
}

bootJar.enabled(false)
jar.enabled(true)

println "Boot Version [${bootVersion}], Cloud version [${BOM_VERSION}]"

dependencies {
    testImplementation 'org.springframework.boot:spring-boot-starter'
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.springframework.cloud:spring-cloud-starter-contract-verifier")
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${bootVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

//create a single Jar with all dependencies
task contracts(type: Jar) {
    archivesBaseName = project.name
    from "${project.rootDir}/src/contractTest/resources/contracts/"
    into "/"
    exclude('**/target/**', '**/mvnw', '**/mvnw.cmd', '**/.mvn/**', '**/src/assembly/**', '**/src/test/**', '**/target/**', '**/*.gradle', '**/build/**',
            '**/gradle/**', '**/gradlew', '**/gradlew.bat', '**/gradle.properties')
//    outputs.cacheIf { true}
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact verifierStubsJar
        }
    }

    repositories {
        maven {
            url = 'http://43.200.221.47:8081/repository/maven-snapshots/'
            allowInsecureProtocol true
            credentials {
                username = 'admin'
                password = 'admin'
            }
        }
    }
}
